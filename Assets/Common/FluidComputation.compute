// Each #kernel tells which function to compile; you can have many kernels
// indices are corresping to kernels in Simulation.cs
#pragma kernel UpdatePositions // indexed from 0
#pragma kernel CalculateDensities // 1
#pragma kernel CalculatePressureForce // 2
#pragma kernel ExternalForces // 3

static const int NumThreads = 64;

//Buffers
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> Velocities;
RWStructuredBuffer<float> Densities;
RWStructuredBuffer<float3> PredictedPositions;
RWStructuredBuffer<float4> SphereObstacles;

//Includes
#include "./ShaderMath.hlsl" //methods in this .compute file cant call each other :( (or they may. idk. didnt work for me)

//Settings
const float3 boundsSize;
const float deltaTime;
const uint numParticles;
const float gravity;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float sphereCount;

const float4x4 localToWorld;
const float4x4 worldToLocal;

[numthreads(NumThreads,1,1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= numParticles)
        return;
    
    float3 pos = PredictedPositions[i];
    float smoothing2 = smoothingRadius * smoothingRadius;
    
    float density = 0;
    for (uint j = 0; j < numParticles; j++)
    {
        if(i == j)
            continue;
        float3 pos2 = PredictedPositions[j];
        float3 offset = pos2 - pos;
        
        float dst = dot(offset, offset);
        if(dst > smoothing2)
            continue;
        dst = sqrt(dst);
        density += SmoothingKernel(dst, smoothingRadius); 
    }
    
    // Store the density in the buffer
    Densities[i] = density;
}

void ResolveCollisions(uint3 id)
{
    float3 pos = Positions[id.x];
    float3 vel = Velocities[id.x];
    
	// Resolve collisions
    if (abs(pos.x) >= boundsSize.x)
    {
        pos.x = boundsSize.x * sign(pos.x);
        vel.x *= -1 * collisionDamping;
    }
    if (abs(pos.y) >= boundsSize.y)
    {
        pos.y = boundsSize.y * sign(pos.y);
        vel.y *= -1 * collisionDamping;
    }
    if (abs(pos.z) >= boundsSize.z)
    {
        pos.z = boundsSize.z * sign(pos.z);
        vel.z *= -1 * collisionDamping;
    }

    Positions[id.x] = pos;
    Velocities[id.x] = vel;
    
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= numParticles)
        return;
    
    //float3 pos = Positions[i] * deltaTime;
    //float3 vel = Velocities[id];
    
    //vel += gravity * deltaTime;
    //pos += vel * deltaTime;
    
    //Positions[id] = pos;
    //Velocities[id] = vel;
    

    
    Positions[i] += Velocities[i] * deltaTime;
    ResolveCollisions(id);
}

float PressureFromDensity(float density)
{
    return (density - targetDensity) * pressureMultiplier;
}

float CalculateSharedPressure(float density1, float density2)
{
    float pressure1 = PressureFromDensity(density1);
    float pressure2 = PressureFromDensity(density2);
    return (pressure1 + pressure2) / 2;
    
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    // Calculate pressure
    float3 pressureForce = 0;
    
    float3 pos = PredictedPositions[id.x];
    float smoothing2 = smoothingRadius * smoothingRadius;
    float density = Densities[id.x];
    for (uint j = 0; j < numParticles; j++)
    {
        if (id.x == j)
            continue;
        float3 pos2 = PredictedPositions[j];
        // Calculate pressure force
        float3 offset = pos2 - pos;
        float dst = dot(offset, offset);
        if (dst > smoothing2)
            continue;
        dst = sqrt(dst);
        float3 dir = dst > 0 ? offset / dst : float3(0, 1, 0);
        float slope = DensityDerivative(dst, smoothingRadius);
        float densityNeigh = Densities[j];
        float sharedPressure = CalculateSharedPressure(density, densityNeigh);
        pressureForce += sharedPressure * dir * slope / densityNeigh;
    }
    
    Velocities[id.x] += pressureForce * deltaTime / density;
}


float3 PushFromSphere(float3 particlePos, float3 sphereCenter, float sphereRadius, float pushForce)
{
    float3 pos = particlePos;
    float3 offset = pos - sphereCenter;
    float dst = dot(offset, offset);
    if (dst > sphereRadius * sphereRadius)
        return float3(0, 0, 0);
    dst = sqrt(dst);
    float3 dir = dst > 0 ? offset / dst : float3(0, 1, 0);
    return dir * pushForce;

}


[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= numParticles)
        return;

	// gravity
    Velocities[i] += gravity * deltaTime;
    
    // sphere obstacles
    for (uint j = 0; j < sphereCount; j++)
    {
        float4 sphere = SphereObstacles[j];
        float3 center = sphere.xyz;
        float radius = sphere.w;
        float3 push = PushFromSphere(PredictedPositions[i], center, radius, 100);
        Velocities[i] += push * deltaTime;
    }

    PredictedPositions[i] = Positions[i] + Velocities[i] * 1/120.0;
}