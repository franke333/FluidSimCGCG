// Each #kernel tells which function to compile; you can have many kernels
// indices are corresping to kernels in Simulation.cs
#pragma kernel UpdatePositions // indexed from 0
#pragma kernel CalculateDensities // 1
#pragma kernel CalculatePressureForce // 2
#pragma kernel ExternalForces // 3

static const int NumThreads = 64;

//Buffers
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> Velocities;
RWStructuredBuffer<float> Densities;
RWStructuredBuffer<float3> PredictedPositions;
RWStructuredBuffer<float4> SphereObstacles;
RWStructuredBuffer<float2x3> BoxObstacles;

//Includes
#include "./ShaderMath.hlsl" //methods in this .compute file cant call each other :( (or they may. idk. didnt work for me)

//Settings
const float3 boundsSize;
const float deltaTime;
const uint numParticles;
const float3 gravity;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const uint sphereCount;
const uint boxCount;

const float4x4 localToWorld;
const float4x4 worldToLocal;

float3 RandomDirection(uint seed)
{
    float3 dir = float3(0, 0, 0);
    dir.x = frac(sin(dot(float3(seed, seed, seed), float3(12.9898, 78.233, 151.7182))) * 43758.5453);
    dir.y = frac(sin(dot(float3(seed, seed, seed), float3(269.5, 183.3, 246.1))) * 43758.5453);
    dir.z = frac(sin(dot(float3(seed, seed, seed), float3(12.9898, 78.233, 151.7182))) * 43758.5453);
    return normalize(dir);

}

[numthreads(NumThreads,1,1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= numParticles)
        return;
    
    float3 pos = PredictedPositions[i];
    float smoothing2 = smoothingRadius * smoothingRadius;
    
    float density = 0;
    for (uint j = 0; j < numParticles; j++)
    {
        if(i == j)
            continue;
        float3 pos2 = PredictedPositions[j];
        float3 offset = pos2 - pos;
        
        float dst = dot(offset, offset);
        if(dst > smoothing2)
            continue;
        dst = sqrt(dst);
        density += SmoothingKernel(dst, smoothingRadius); 
    }
    
    // Store the density in the buffer
    Densities[i] = density;
}

void ResolveCollisions(uint3 id)
{
    float3 pos = Positions[id.x];
    float3 vel = Velocities[id.x];
    
	// Resolve collisions
    if (abs(pos.x) >= boundsSize.x)
    {
        pos.x = boundsSize.x * sign(pos.x);
        vel.x *= -1 * collisionDamping;
    }
    if (abs(pos.y) >= boundsSize.y)
    {
        pos.y = boundsSize.y * sign(pos.y);
        vel.y *= -1 * collisionDamping;
    }
    if (abs(pos.z) >= boundsSize.z)
    {
        pos.z = boundsSize.z * sign(pos.z);
        vel.z *= -1 * collisionDamping;
    }

    Positions[id.x] = pos;
    Velocities[id.x] = vel;
    
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= numParticles)
        return;
    
    //float3 pos = Positions[i] * deltaTime;
    //float3 vel = Velocities[id];
    
    //vel += gravity * deltaTime;
    //pos += vel * deltaTime;
    
    //Positions[id] = pos;
    //Velocities[id] = vel;
    

    
    Positions[i] += Velocities[i] * deltaTime;
    ResolveCollisions(id);
}

float PressureFromDensity(float density)
{
    return (density - targetDensity) * pressureMultiplier;
}

float CalculateSharedPressure(float density1, float density2)
{
    float pressure1 = PressureFromDensity(density1);
    float pressure2 = PressureFromDensity(density2);
    return (pressure1 + pressure2) / 2;
    
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    // Calculate pressure
    float3 pressureForce = 0;
    
    float3 pos = PredictedPositions[id.x];
    float smoothing2 = smoothingRadius * smoothingRadius;
    float density = Densities[id.x];
    if(density < 0.0001)
        return;
    for (uint j = 0; j < numParticles; j++)
    {
        if (id.x == j)
            continue;
        float3 pos2 = PredictedPositions[j];
        // Calculate pressure force
        float3 offset = pos2 - pos;
        float dst = dot(offset, offset);
        if (dst > smoothing2)
            continue;
        dst = sqrt(dst);
        float3 dir = dst > 0.0001 ? offset / dst : RandomDirection(id.x);
        float slope = DensityDerivative(dst, smoothingRadius);
        float densityNeigh = Densities[j];
        float sharedPressure = CalculateSharedPressure(density, densityNeigh);
        if(densityNeigh < 0.0001)
            continue;
        pressureForce += sharedPressure * dir * slope / densityNeigh;
    }
    
    Velocities[id.x] += pressureForce * deltaTime / density;
}


float3 PushFromSphere(float3 particlePos, float3 sphereCenter, float sphereRadius, float pushForce)
{
    float3 pos = particlePos;
    float3 offset = pos - sphereCenter;
    float dst = dot(offset, offset);
    if (dst > sphereRadius * sphereRadius)
        return float3(0, 0, 0);
    dst = sqrt(dst);
    float3 dir = dst > 0.0001 ? offset / dst : float3(0, 1, 0);
    return dir * pushForce;

}

float2x3 PushFromBox(float3 particlePos, float3 particleVel, float3 boxCenter, float3 boxSize)
{
    float3 pos = particlePos;
    float3 offset = pos - boxCenter;
    float3 halfSize = boxSize / 2;
    //if particle is inside the box, no need to push
    if (abs(offset.x) > halfSize.x || abs(offset.y) > halfSize.y || abs(offset.z) > halfSize.z)
        return float2x3(particlePos,particleVel);
    float3 newPos = particlePos;
    // push particles inside the box outside
    //choose closest face to push
    float3 dstToFace = halfSize - abs(offset);
    if (dstToFace.x < dstToFace.y && dstToFace.x < dstToFace.z)
    {
        newPos.x = boxCenter.x + halfSize.x * sign(offset.x);
        particleVel.x *= -1 * collisionDamping;
    }
    else if (dstToFace.y < dstToFace.z)
    {
        newPos.y = boxCenter.y + halfSize.y * sign(offset.y);
        particleVel.y *= -1 * collisionDamping;
    }
    else
    {
        newPos.z = boxCenter.z + halfSize.z * sign(offset.z);
        particleVel.z *= -1 * collisionDamping;
    }
    return float2x3(newPos, particleVel);
    
}


[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= numParticles)
        return;

	// gravity
    Velocities[i] += gravity * deltaTime;
    
    // sphere obstacles
    for (uint j = 0; j < sphereCount; j++)
    {
        float4 sphere = SphereObstacles[j];
        float3 center = sphere.xyz;
        float radius = sphere.w;
        float3 push = PushFromSphere(Positions[i], center, radius,20);
        Velocities[i] += push * deltaTime;
    }
    
    // box obstacles
    for (uint k = 0; k < boxCount; k++)
    {
        float2x3 box = BoxObstacles[k];
        float3 center = box._11_12_13;
        float3 size = box._21_22_23;
        float2x3 newPosVel = PushFromBox(Positions[i], Velocities[i], center, size);
        Velocities[i] = newPosVel._21_22_23;
        Positions[i] = newPosVel._11_12_13;
    }
    

    // bound velocity
    
    float magnitude = length(Velocities[i]);
    if (magnitude > 100)
    {
        Velocities[i] = normalize(Velocities[i]) * 100;
    }
    
    if (isnan(length(Velocities[i])) || isnan(length(Positions[i])))
    {
        Velocities[i] = float3(0,0,0);
        Positions[i] = float3(0,0,0);
    }
    
        PredictedPositions[i] = Positions[i] + Velocities[i] * 1 / 120.0;
}